plugins {
    id 'java'
    id 'org.screamingsandals.nms-mapper' version '1.3.0'
}

group 'il.co.biosignals'
version '1.0-SNAPSHOT'

setArchivesBaseName("BioSignals-MinecraftLayer")

repositories {
    mavenCentral()

    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        // As of Gradle 5.1, you can limit this to only those
        // dependencies you expect from it
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
    /*
     As Spigot-API depends on the BungeeCord ChatComponent-API,
    we need to add the Sonatype OSS repository, as Gradle,
    in comparison to maven, doesn't want to understand the ~/.m2
    directory unless added using mavenLocal(). Maven usually just gets
    it from there, as most people have run the BuildTools at least once.
    This is therefore not needed if you're using the full Spigot/CraftBukkit,
    or if you're using the Bukkit API.
    */
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    // mavenLocal() // This is needed for CraftBukkit and Spigot.

    maven { url 'https://jitpack.io' } // DecentHolograms
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
    implementation 'org.jetbrains:annotations:20.1.0'
    compileOnly 'org.spigotmc:spigot-api:1.19.1-R0.1-SNAPSHOT' // The Spigot API with no shadowing. Requires the OSS repo.
   // compileOnly 'org.spigotmc:spigot:1.19-R0.1-SNAPSHOT' // The full Spigot server with no shadowing. Requires mavenLocal.

    compileOnly 'com.github.decentsoftware-eu:decentholograms:2.5.2'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}/* First add a new source set. Don't use your main source set for generated stuff. */
sourceSets.main.java {
    srcDir 'src/generated/java' // adds new directory to the source set
}

/* All other things will be set inside the nmsGen method. */
nmsGen {
    basePackage = "com.example.nms.accessors" // All generated classes will be in this package.
    sourceSet = "src/generated/java" // All generated classes will be part of this source set.
    minMinecraftVersion = "1.19.2" // Optional, default value is 1.9.4
    maxMinecraftVersion = "1.19.2" // Optional, default value is the last known version
    nullableAnnotation = "org.jetbrains.annotations.Nullable" // Optional, nullable return types or parameters will be annotated with this if present
    notNullAnnotation = "org.jetbrains.annotations.NotNull" // (not used yet) Optional, not-null return type or parameters will be annotated with this if present
    addInformationJavadoc = true // Optional, default value is true
    mapForPlatforms = ["searge", "spigot"] // Optional, default value is ["searge", "spigot"]

    /*
     * This means that the folder will be cleared before generation.
     *
     * If this value is false, old no longer used classes won't be removed.
     */
    cleanOnRebuild = true

    var Component = reqClass('net.minecraft.network.chat.Component') {
        reqMethod('getString')
    }

    var CommandSource = reqClass('net.minecraft.commands.CommandSource') {
        reqMethod('sendSystemMessage', Component)
    }

    reqClass('net.minecraft.commands.CommandSourceStack') {
        reqMethod('withSource', CommandSource)
        reqField('source')
    }
}

tasks.getByName('compileJava').dependsOn('generateNmsComponents')